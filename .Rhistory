getwd()
getwd()
source("ProgrammingAssignment2/cachematrix.R")
a <- makeCacheMatrix( matrix 1:4, nrow = 2, ncol = 2) )
a <- makeCacheMatrix( matrix(1:4, nrow = 2, ncol = 2) )
my_matrix <- matrix(1:4, nrow = 2, ncol = 2)
my_matrix2 <- makeCacheMatrix(my_matrix)
makeCacheMatrix <- function(x = matrix()) {
y <- NULL  # sets a default if cacheSolve has not been used.
inv <- NULL
set <- function(y){
x <<- y
inv <<- NULL
}
get<- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function () inv
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
cachesolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
mtx <- x$get()
inv <- solve(mtx, ...)
x$setinverse(inv)
inv
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
}
my_matrix <- matrix(1:4, nrow = 2, ncol = 2)
my_matrix2 <- makeCacheMatrix(my_matrix)
makeCacheMatrix <- function(x = matrix()) {
y <- NULL  # sets a default if cacheSolve has not been used.
inv <- NULL
set <- function(y){
x <<- y
inv <<- NULL
}
get<- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function () inv
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
cachesolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
mtx <- x$get()
inv <- solve(mtx, ...)
x$setinverse(inv)
inv
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
}
my_matrix <- makeCacheMatrix(matrix(1:4, nrow = 2, ncol = 2))
my_matrix$get()
my_matrix$getinverse()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL  # sets a default if cacheSolve has not been used.
set <- function(y){
x <<- y
inv <<- NULL
}
get<- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function () inv
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
cachesolve <- function(x, ...) {
# Return a matrix that is the inverse of 'x'
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
mtx <- x$get()
inv <- solve(mtx, ...)
x$setinverse(inv)
inv
}
my_matrix <- makeCacheMatrix(matrix(1:4, nrow = 2, ncol = 2))
my_matrix$getinverse()
cacheSolve(my_matrix)
my_matrix$get()
my_matrix$getinverse()
cacheSolve(my_matrix)
my_matrix$setinverse()
my_matrix$getinverse()
mtx
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL  # sets a default if cacheSolve has not been used.
set <- function(y){
x <<- y
inv <<- NULL
}
get<- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function () inv
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
cachesolve <- function(x, ...) {
# Return a matrix that is the inverse of 'x'
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
mtx <- x$get()
inv <- solve(mtx, ...)
x$setinverse(inv)
inv
}
my_matrix$get()
my_matrix$getinverse()
cacheSolve(my_matrix)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL  # sets a default if cacheSolve has not been used.
set <- function(y){
x <<- y
inv <<- NULL
}
get<- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function () inv
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
cachesolve <- function(x, ...) {
# Return a matrix that is the inverse of 'x'
inv <- x$getinverse()
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
mat <- x$get()
inv <- solve(mat, ...)
x$setinverse(inv)
inv
}
my_matrix <- makeCacheMatrix(matrix(1:4, nrow = 2, ncol = 2))
my_matrix$get()
my_matrix$getinverse()
cachesolve(my_matrix)
my_matrix$getinverse()
my_matrix$set(matrix(4:1, 2, 2))
my_matrix$get()
my_matrix$getinverse()
cachesolve(my_matrix)
